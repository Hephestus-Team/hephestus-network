const app = require('../app'), debug = require('debug')('social:server'), http = require('http'), mongoose = require('mongoose');

app.set('port', normalizePort(process.env.PORT || '3333'));
app.set('env', process.env.ENV || 'development');

var opts = {
    server: {
        socketOptions: {keepAlive: 1}
    }
}

switch (app.get('env')) {
	case 'development':
		app.use(require('morgan')('dev'));
		mongoose.connect(require('./credentials')().mongo.development.connectionString, opts, (err) => {
			if(err) throw new Error(`Mongoose connection error <${err}>`);
		});
		break;
	case 'production':
		app.use(require('express-logger')({
			path: __dirname + '/dev/null/requests.log'
		}));
		mongoose.connect(require('./credentials')().mongo.production.connectionString, opts, (err) => {
			if(err) throw new Error(`Mongoose connection error <${err}>`);
		});
		break;
	default:
		throw new Error(`Unknown execution enviroment: ${app.get('env')}`);
}

http.createServer(app).listen(app.get('port'), () => {
	console.log('Express server started in ' + app.get('env') +
		' mode on http://localhost:' + app.get('port') +
		'; press Ctrl-C to terminate.');
});

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		return val;
	}

	if (port >= 0) {
		return port;
	}

	return false;
}
